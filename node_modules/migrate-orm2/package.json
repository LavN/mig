{
  "name": "migrate-orm2",
  "version": "1.2.11",
  "description": "A library providing migrations using ORM2's model DSL leveraging Visionmedia's node-migrate.",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/locomote/node-migrate-orm2.git"
  },
  "author": {
    "name": "nicholasf, dxg, vaskas, benkitzelman, sidorares"
  },
  "bugs": {
    "url": "https://github.com/locomote/node-migrate-orm2/issues"
  },
  "homepage": "https://github.com/locomote/node-migrate-orm2",
  "scripts": {
    "test": "node test/run"
  },
  "dependencies": {
    "sql-ddl-sync": "git://github.com/dresende/node-sql-ddl-sync.git#v0.3.5",
    "migrate": "~0.1.3",
    "lodash": "~2.4.1",
    "async": "~0.2.10",
    "mkdirp": "~0.3.5"
  },
  "devDependencies": {
    "should": "~2.1.1",
    "mocha": "~1.15.1",
    "rimraf": "~2.2.5",
    "orm": "2.1.9",
    "mysql": "~2.0.0-rc1",
    "pg": "~2.10.0"
  },
  "readme": "# migrate-orm2\n\nMigrations using [ORM2's](https://github.com/dresende/node-orm2) model DSL leveraging Visionmedia's node-migrate.\n\n## Installation\n\n```\nnpm install migrate-orm2\n```\n\n## Usage\n\nThe example below uses MySQL. Locomote uses migrate-orm2 with Postgres. Testing was also done with SQLite3, though some driver issues were encountered.\n\nBuild a connection & construct the migrate-orm2 Task object:\n\n```js\nvar orm         = require('orm');\nvar MigrateTask = require('migrate-orm2');\n\norm.connect(connectionString, function (err, connection) {\n  if (err) throw err;\n  var task = new Task(connection.driver);\n});\n```\n\nThe Task constructor function can support options allowing for a custom migrations directory and/or coffeescript support (see 'Usage - opts' below).\n\nA Task object offers three operations - *generate*, *up* and *down*.\n\n## Usage - generate\n\n```\n> task.generate('create-users', function(err, result){});\n>   create : /Users/nicholasf/code/locomote/node-migrate-orm2/migrations/001-create-users.js\n\n```\n\nThe 'migrations' folder is the default but can be overridden in the opts argument (see 'Usage - opts' below).\n\nA skeleton migration file now exists and can be populated with the [ORM2 DSL](https://github.com/dresende/node-sql-ddl-sync#example).\n\nA simple example, taken from the tests:\n\n```js\nexports.up = function (next) {\n  this.createTable('test_table', {\n    id     : { type : \"number\", key: true, serial: true },\n    name   : { type : \"text\", required: true }\n  }, next);\n};\n\nexports.down = function (next){\n  this.dropTable('test_table', next);\n};\n\n```\n\nAnother example for adding or dropping a column:\n\n```js\nexports.up = function(next){\n  this.addColumn('agency', preferredProviders: {type: \"text\", defaultValue: '1G', required: true}, next);\n}\n\nexports.down = function(next){\n  this.dropColumn('agency', 'preferredProvider', next);\n}\n```\n\nAn example of adding an index:\n\n```js\nexports.up = function (next) {\n  this.addIndex('agency_email_idx', {\n    table: 'agency',\n    columns: ['email'],\n    unique: true\n  }, next);\n};\n```\n\nexports.down = function (next) {\n  this.dropIndex('agency_email_idx', 'agency', next);\n};\n\n\nSo, ```this``` supports the following operations:\n\n* createTable\n* dropTable\n* addColumn\n* dropColumn\n* addIndex\n* dropIndex\n* addPrimaryKey\n* dropPrimaryKey\n* addForeignKey\n* dropForeignKey\n\nThese operations are depicted in the examples folder.\n\nWe would like to add modifyColumn functionality in the future.\n\n## Usage - up and down\n\n```\n> task.up(function(e,r){});\n>   up : migrations/001-create-users.js\n  migration : complete\n```\n\nAlternatively, when there are many migrations, a filename can be specified:\n\n```\n> task.generate('create-servers', function(err, result){});\n>   create : /Users/nicholasf/code/locomote/node-migrate-orm2/migrations/002-create-servers.js\n\n> task.up('001-create-users.js', function(e,r){})\n>   up : migrations/001-create-users.js\n  migration : complete\n```\n\nThis means 'run up to this migration then execute its up function, then stop.'\n\n## Usage - the orm_migrations table\n\nMigrate-orm2 maintains an internal orm_migrations table which allows it to run from previous state.\n\nProceeding from the example immediately above:\n\n```\n> task.down(function(e,r){});\n>   down : migrations/001-create-users.js\n  migration : complete\n```\n\nAlthough there are two migration files, the up function reads from orm_migrations to find its current point. It then works out to call the down function of 001-create-users.js instead of 002-create-servers.js.\n\nThe orm_migrations table can be used to represent the history of migrations.\n\n```\nmysql> select * from orm_migrations;\n+---------------------+-----------+--------------------------+\n| migration           | direction | created_at               |\n+---------------------+-----------+--------------------------+\n| 001-create-users.js | up        | 2013-12-15T23:07:09.911Z |\n| 001-create-users.js | up        | 2013-12-15T23:09:01.263Z |\n| 001-create-users.js | down      | 2013-12-15T23:10:04.023Z |\n+---------------------+-----------+--------------------------+\n3 rows in set (0.00 sec)\n\n```\n\nThis reflects the history above.\n\n## Usage - opts\n\nThe Task object can be modified to work from a different directory or to generate and cooperate with coffee-script migrations.\n\n```\nvar task = new Task(connection, {dir: 'data/migrations', coffee: true});\n```\n\n## Usage - orm-migrate\n\nSee https://github.com/nicholasf/node-orm-migrate for a command line tool.\n\n```\n♪  node-orm-migrate git:(master) ✗ migrate --help\n\n  Usage: migrate [options]\n\n  Options:\n\n    -h, --help      output usage information\n    -V, --version   output the version number\n    -g, --generate  Generate a migration\n    -u, --up        Run up migrations\n    -d, --down      Run down migrations\n```\n\n\n## Usage - grunt\n\nWe handcraft grunt and our tasks looks this.\n\nFirstly, we have a helper file which knows how to build the connection and opts and invoke the Task object:\n\n```js\nvar MigrationTask = require('migrate-orm2');\nvar orm = require('orm');\n\nexports.runMigration = function (operation, grunt, done) {\n  orm.settings.set(\"connection.debug\", true);\n  orm.connect('mysql://root@localhost/ninja', function (err, connection) {\n    if (err) throw(err);\n\n    var migrationTask = new MigrationTask(\n      connection.driver,\n      { dir: 'data/migrations'}\n    );\n    migrationTask[operation](grunt.option('file'), done);\n  });\n};\n```\n\nRegistering the Grunt tasks looks like this:\n\n```js\ngrunt.registerTask('migrate:generate', '', function () {\n  var done = this.async();\n  require('./tasks/db').runMigration('generate', grunt, done);\n});\n\ngrunt.registerTask('migrate:up', '', function () {\n  var done = this.async();\n  require('./tasks/db').runMigration('up', grunt, done);\n});\n\ngrunt.registerTask('migrate:down', '', function () {\n  var done = this.async();\n  require('./tasks/db').runMigration('down', grunt, done);\n});\n```\n\nTo generate a migration file or to indicate a direction:\n\n```js\ngrunt migrate:generate --file=create-users\ngrunt migrate:generate --file=create-servers\ngrunt migrate:up --file=001-create-users.js\n```\n\n## Running Tests\n\nPlease note - running all of the tests together can produce database connection pooling problems. We are currently considering these.\n\nTests work in isolation and when the database is tuned for a greater amount of database connections.\n\nCreate `test/config.js` (see `test/config.example.js` for instructions)\n\n```bash\nnpm test\n```\nThis will run the tests against all configurations inside `config.js`.\nTo run against a single config:\n```bash\nORM_PROTOCOL=mysql node test/run\n# OR\nORM_PROTOCOL=mysql mocha test/integration\n```\n\n## Guideline to Contributing\n\nContributions are welcome. If you want to discuss or request a feature, please open an issue.\n\nWe will ask for test coverage of Pull Requests for most issues. Please see the current testing strategy in test/integration.\n\n## Contributors\n\n* nicholasf\n* dxg\n* vaskas\n* benkitzelman\n* sidorares\n* wolfeidau\n\nThis work is a melding of two underlying libraries:\n\n* [node-migrate](https://github.com/visionmedia/node-migrate) from @visionmedia (TJ)\n* [node-sql-ddl-sync](https://github.com/dresende/node-sql-ddl-sync) from @dresende\n\n",
  "readmeFilename": "README.md",
  "_id": "migrate-orm2@1.2.11",
  "dist": {
    "shasum": "873e5262d43dde207048f246d0a636e7f42dd4d8"
  },
  "_from": "migrate-orm2@1.2.11",
  "_resolved": "https://registry.npmjs.org/migrate-orm2/-/migrate-orm2-1.2.11.tgz"
}
